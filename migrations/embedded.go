// Code generated by go-bindata.
// sources:
// migrations/20180103142000_initial_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180103142000_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5d\x93\x9b\x36\x14\x7d\xf7\xaf\xb8\xb3\x0f\x0d\xa4\xac\xed\x38\xc9\x34\x93\x6d\x33\x43\x30\x4e\x98\x38\x38\x05\x9c\x74\x9f\x3c\x32\x5c\x83\x66\x41\xa2\x92\xb0\xe3\x76\xfa\xdf\x3b\x02\x6c\xe3\x8f\xf5\xf6\x63\x9f\xd6\xd2\xd1\xb9\xf7\x1e\x9d\x7b\xc5\xe0\x79\x0f\x9e\x83\xc3\xcb\xad\xa0\x69\xa6\x60\x34\x7c\xf1\x06\xa2\x0c\xc1\x27\x0f\xa4\x20\x60\x57\x2a\xe3\x42\xf6\xa0\xc6\x4d\x69\x8c\x4c\x62\x02\x15\x4b\x50\x80\xca\x10\xec\x92\xc4\x19\xee\x76\x2c\xf8\x8a\x42\x52\xce\x60\xd4\x1f\x82\xa1\x01\x37\xed\xd6\x8d\x79\xa7\x29\xb6\xbc\x82\x82\x6c\x81\x71\x05\x95\x44\x50\x19\x95\xb0\xa2\x39\x02\x7e\x8f\xb1\x54\x40\x19\xc4\xbc\x28\x73\x4a\x58\x8c\xb0\xa1\x2a\xab\xe3\xb4\x2c\x7d\xcd\x71\xdf\x72\xf0\xa5\x22\x94\x01\x81\x98\x97\x5b\xe0\xab\x2e\x10\x88\x6a\x93\xce\x94\x2a\xdf\x0e\x06\x9b\xcd\xa6\x4f\xea\x64\xfb\x5c\xa4\x83\xbc\x81\xc9\xc1\xd4\x73\x5c\x3f\x74\x6f\x47\xfd\x61\x7b\x60\xce\x72\x94\x12\x04\xfe\x5e\x51\x81\x09\x2c\xb7\x40\xca\x32\xa7\x31\x59\xe6\x08\x39\xd9\x00\x17\x40\x52\x81\x98\x80\xe2\x3a\xe1\x8d\xa0\x8a\xb2\xd4\x02\xc9\x57\x6a\x43\x04\x6a\x9a\x84\x4a\x25\xe8\xb2\x52\x47\x7a\xed\xd2\xa3\xf2\x08\xc0\x19\x10\x06\x37\x76\x08\x5e\x78\x03\xef\xed\xd0\x0b\x2d\x4d\xf2\xcd\x8b\x3e\xce\xe6\x11\x7c\xb3\x83\xc0\xf6\x23\xcf\x0d\x61\x16\x80\x33\xf3\xc7\x5e\xe4\xcd\xfc\x10\x66\x13\xb0\xfd\x7b\xf8\xe4\xf9\x63\x0b\x90\xaa\x0c\x05\xe0\xf7\x52\xe8\x0a\xb8\x00\xaa\x95\xc4\xa4\x96\x2d\x44\x3c\x4a\x61\xc5\x9b\x94\x64\x89\x31\x5d\xd1\x18\x72\xc2\xd2\x8a\xa4\x08\x29\x5f\xa3\x60\x94\xa5\x50\xa2\x28\xa8\xd4\x37\x2a\x81\xb0\x44\xd3\xe4\xb4\xa0\x8a\xa8\x7a\xe9\xac\x2e\x1d\x68\xd0\xeb\xdd\xde\xc2\x8f\x05\x4d\x05\x51\x08\xf3\xb2\xe7\x04\xae\x1d\xb9\x10\xd9\xef\xa7\x2e\x78\x13\xf0\x67\x11\xb8\xbf\x79\x61\x14\x6a\x0f\x08\x09\x46\x0f\x00\xe0\x4b\xe0\x7d\xb6\x83\x7b\xf8\xe4\xde\x83\x41\x13\xd3\xea\xd5\xcb\x34\x81\xce\xdf\x7c\xee\x8d\x0f\xbf\x34\x93\x3f\x9f\x4e\xad\x1a\xa9\xc9\x18\x29\xb0\xd9\xfb\x6a\x07\xce\x47\x3b\x30\x5e\x8c\xde\x98\xa0\x35\x0b\xa3\xc0\xf6\xfc\xa8\x89\xb9\xd8\x81\x17\x0f\xb8\x85\xb9\xef\xfd\x3a\x77\x4f\xe8\x12\x2a\xcb\x9c\x6c\x17\x0d\xe5\x8e\x6e\xf4\xfa\xb5\xd9\xec\x93\x35\x51\x44\x2c\x2a\x91\x77\xc3\x1d\xf6\x6f\x6f\x6b\xf3\xc9\xb7\x83\x81\xe2\x3c\x97\x7d\x8a\x6a\x55\xbb\x2f\x53\x45\x3e\x58\xc6\xe5\xab\x9f\x6a\xa0\x16\x7e\xa1\x48\x7a\x92\xb7\x4e\x1b\xc6\xee\xc4\x9e\x4f\x23\x78\x86\xec\x59\x43\x9b\xf3\xb8\x96\xff\x18\x5d\x87\xd5\x21\xb1\x9f\xf6\xe1\x26\x24\x0c\x26\x82\xb0\x98\xca\x98\x5b\xe0\xd8\x37\xf5\x59\x45\x0b\xfc\x83\x33\xbc\x7a\xf6\x0b\x69\xfc\x10\xd1\x02\xc1\x98\x87\xf0\x03\x38\x84\x91\x84\x98\x0d\x49\x81\x8a\x24\x44\x91\x86\xe4\xfd\x7d\xe4\xda\xfb\x0b\xd9\xa7\xfb\xe7\x5f\xcf\xc0\xf9\xe8\x3a\x9f\xc0\xc8\x91\xa5\x2a\x33\x76\xc7\x4c\xf8\x19\x5e\x8e\x86\xc3\xa1\x79\xa2\x37\x16\x84\xe6\x7b\xa6\x6e\x72\xd0\x5e\x50\x83\x2b\x89\x94\x1b\x2e\x92\x4b\xf1\x8f\x43\xee\x90\x87\x90\x0d\xc3\x8a\xc4\xb8\xe4\xfc\x61\x51\x7b\xeb\xd8\x28\xdd\x48\x29\xe7\x69\x8e\x8b\xd6\x81\x57\x70\xa4\xc0\x18\x99\x42\xa1\xb1\x8f\xe3\xa4\x42\x52\xec\xe8\xae\xe0\xe2\x4a\x2a\x5e\x3c\x1d\x17\x93\x14\x17\x31\xaf\x98\xd2\xbf\xb4\xb7\xe1\xec\x26\x86\x3b\x4d\x3a\xe0\x77\xbf\xc0\x99\xfa\xb1\x40\xa2\x70\xa1\x1d\xa2\x55\xf5\x3e\x74\xe8\x5a\x86\x2e\xe4\xdd\x39\x43\x55\x26\x4f\x31\x74\x21\x17\x18\xd6\x28\xe8\x6a\x7b\x95\xa1\x0b\x69\xca\x38\x14\x7a\xd6\xbe\x7a\x62\xb7\x6c\x17\xc9\x8e\x20\x8f\xb1\xf5\xcc\xbb\xde\x53\x23\x6c\x91\xe0\x9a\xc6\xf8\xe8\x20\xd3\xab\x93\x59\xe0\x7a\x1f\xfc\x66\xb5\x3e\x44\x13\x13\x02\x77\xe2\x06\xae\xef\xb8\xed\x2c\xac\xf1\xba\x17\xa3\xd9\x78\xf6\x16\x66\x3e\x8c\xdd\xa9\x1b\xb9\xe0\xd8\xa1\x63\x8f\xdd\x93\xa1\x78\xe4\x8d\xf3\x69\xa8\x2d\x74\x34\x31\xff\x55\x51\xda\x31\x97\x4a\x92\xbc\x12\xb1\x6e\x0b\x0b\xa4\x22\x0a\x2d\x28\xb9\xa4\x7a\x26\x5d\x2a\x75\x8f\xfe\x2f\xc5\x9e\xb1\x25\x28\x15\x65\xf5\x00\xfc\x3f\xfa\xed\x93\x3a\x79\x55\x8e\x25\xdc\x95\xd5\x8a\xb7\xf7\xd0\x1e\xa5\x03\xcd\xf5\x17\x91\x7e\x4c\x25\x17\x0a\xb8\xd0\x4f\x22\x67\x20\xf8\x46\x5e\x68\x8b\x03\xc9\x3f\x6b\x89\xe3\x7a\x1f\x4b\xb4\xbe\x86\x43\xef\x87\x9f\xed\xe9\x54\x47\xb9\xd0\x1b\x3a\xe5\x95\xa0\xc8\x12\x63\x68\x5a\x40\xd9\x9a\x2a\x34\x5e\xec\xff\x4d\x8c\x91\x69\xc1\x32\xe7\xf1\x03\x26\xc6\x4b\xd3\x82\x04\x73\xd4\xeb\xaf\x4c\x0b\x88\x88\x33\xba\xc6\xc4\x78\x6d\x36\x42\xb6\x2f\x67\xd7\x13\x27\x57\x54\x5b\xad\xfb\x45\x30\xe6\x1b\xd6\x1b\x07\xb3\x2f\x07\xe7\x9d\xba\xee\xee\xca\x7e\xd3\x6a\x57\x10\xf2\xae\xf7\x77\x00\x00\x00\xff\xff\x67\xe4\x81\xc5\xd8\x0a\x00\x00")

func _20180103142000_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180103142000_initial_schemaSql,
		"20180103142000_initial_schema.sql",
	)
}

func _20180103142000_initial_schemaSql() (*asset, error) {
	bytes, err := _20180103142000_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180103142000_initial_schema.sql", size: 2776, mode: os.FileMode(420), modTime: time.Unix(1518816690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180103142000_initial_schema.sql": _20180103142000_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180103142000_initial_schema.sql": &bintree{_20180103142000_initial_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

